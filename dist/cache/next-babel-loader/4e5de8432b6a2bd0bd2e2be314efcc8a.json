{"ast":null,"code":"import _regeneratorRuntime from \"@babel/runtime-corejs2/regenerator\";\nimport _asyncToGenerator from \"@babel/runtime-corejs2/helpers/esm/asyncToGenerator\";\nvar definitions = {\n  DKIM: null\n};\n\nvar getContract =\n/*#__PURE__*/\nfunction () {\n  var _ref = _asyncToGenerator(\n  /*#__PURE__*/\n  _regeneratorRuntime.mark(function _callee(eth, name) {\n    var data, networkId, networkData, contract;\n    return _regeneratorRuntime.wrap(function _callee$(_context) {\n      while (1) {\n        switch (_context.prev = _context.next) {\n          case 0:\n            if (definitions[name]) {\n              _context.next = 5;\n              break;\n            }\n\n            _context.next = 3;\n            return import(\"../../../contracts/\".concat(name, \".json\"));\n\n          case 3:\n            data = _context.sent;\n            definitions[name] = data;\n\n          case 5:\n            networkId = Number(eth.currentProvider.networkVersion);\n            networkData = definitions[name].networks[networkId];\n\n            if (networkData) {\n              _context.next = 9;\n              break;\n            }\n\n            throw Error(\"contract address not found\");\n\n          case 9:\n            contract = new eth.contract(definitions[name].abi);\n            return _context.abrupt(\"return\", contract.at(networkData.address));\n\n          case 11:\n          case \"end\":\n            return _context.stop();\n        }\n      }\n    }, _callee);\n  }));\n\n  return function getContract(_x, _x2) {\n    return _ref.apply(this, arguments);\n  };\n}();\n\nexport { getContract };","map":{"version":3,"sources":["/home/devlabs-php/Desktop/projects/ambire/bs/solidity-dkim/src/models/Eth/getContract.ts"],"names":["definitions","DKIM","getContract","eth","name","data","networkId","Number","currentProvider","networkVersion","networkData","networks","Error","contract","abi","at","address"],"mappings":";;AAAA,IAAMA,WAAW,GAAG;AAClBC,EAAAA,IAAI,EAAE;AADY,CAApB;;AAIA,IAAMC,WAAW;AAAA;AAAA;AAAA;AAAA;AAAA,2BAAG,iBAAOC,GAAP,EAAiBC,IAAjB;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,gBACbJ,WAAW,CAACI,IAAD,CADE;AAAA;AAAA;AAAA;;AAAA;AAAA,mBAEG,oCAA6BA,IAA7B,WAFH;;AAAA;AAEVC,YAAAA,IAFU;AAIhBL,YAAAA,WAAW,CAACI,IAAD,CAAX,GAAoBC,IAApB;;AAJgB;AAOZC,YAAAA,SAPY,GAOAC,MAAM,CAACJ,GAAG,CAACK,eAAJ,CAAoBC,cAArB,CAPN;AAQZC,YAAAA,WARY,GAQEV,WAAW,CAACI,IAAD,CAAX,CAAkBO,QAAlB,CAA2BL,SAA3B,CARF;;AAAA,gBAUbI,WAVa;AAAA;AAAA;AAAA;;AAAA,kBAWVE,KAAK,CAAC,4BAAD,CAXK;;AAAA;AAcZC,YAAAA,QAdY,GAcD,IAAIV,GAAG,CAACU,QAAR,CAAiBb,WAAW,CAACI,IAAD,CAAX,CAAkBU,GAAnC,CAdC;AAAA,6CAgBXD,QAAQ,CAACE,EAAT,CAAYL,WAAW,CAACM,OAAxB,CAhBW;;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,GAAH;;AAAA,kBAAXd,WAAW;AAAA;AAAA;AAAA,GAAjB;;AAmBA,SAASA,WAAT","sourcesContent":["const definitions = {\r\n  DKIM: null\r\n};\r\n\r\nconst getContract = async (eth: any, name: keyof typeof definitions) => {\r\n  if (!definitions[name]) {\r\n    const data = await import(`../../../contracts/${name}.json`);\r\n\r\n    definitions[name] = data;\r\n  }\r\n\r\n  const networkId = Number(eth.currentProvider.networkVersion);\r\n  const networkData = definitions[name].networks[networkId];\r\n\r\n  if (!networkData) {\r\n    throw Error(\"contract address not found\");\r\n  }\r\n\r\n  const contract = new eth.contract(definitions[name].abi);\r\n\r\n  return contract.at(networkData.address);\r\n};\r\n\r\nexport { getContract };\r\n"]},"metadata":{},"sourceType":"module"}