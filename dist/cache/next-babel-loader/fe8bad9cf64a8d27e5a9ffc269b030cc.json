{"ast":null,"code":"import _regeneratorRuntime from \"@babel/runtime-corejs2/regenerator\";\nimport { types, flow } from \"mobx-state-tree\";\nimport getEth from \"./getEth\";\nimport { getContract as _getContract } from \"./getContract\";\nimport { isSSR } from \"../../utils\";\nvar Model = types.model(\"Eth\", {\n  isInstalled: types.maybeNull(types[\"boolean\"]),\n  account: types.maybeNull(types.string),\n  networkId: types.maybeNull(types.number)\n}).views(function (self) {\n  return {\n    get isLoggedIn() {\n      return self.account !== null;\n    },\n\n    get network() {\n      if (self.networkId === 1) {\n        return \"mainnet\";\n      } else if (self.networkId === 2) {\n        return \"morden\";\n      } else if (self.networkId === 11155111) {\n        return \"sepolia\";\n      }\n\n      return \"unknown network\";\n    }\n\n  };\n}).actions(function (self) {\n  var eth;\n  return {\n    _getEth: function _getEth() {\n      return eth;\n    },\n    getEth: function getEth() {\n      if (!eth) {\n        throw Error(\"eth not initialized\");\n      }\n\n      return eth;\n    },\n    setEth: function setEth(_eth) {\n      eth = _eth;\n    }\n  };\n}).actions(function (self) {\n  return {\n    sync: flow(\n    /*#__PURE__*/\n    _regeneratorRuntime.mark(function _callee() {\n      var eth, accounts, networkId;\n      return _regeneratorRuntime.wrap(function _callee$(_context) {\n        while (1) {\n          switch (_context.prev = _context.next) {\n            case 0:\n              if (!isSSR) {\n                _context.next = 2;\n                break;\n              }\n\n              return _context.abrupt(\"return\");\n\n            case 2:\n              if (self._getEth()) {\n                _context.next = 8;\n                break;\n              }\n\n              _context.t0 = self;\n              _context.next = 6;\n              return getEth();\n\n            case 6:\n              _context.t1 = _context.sent;\n\n              _context.t0.setEth.call(_context.t0, _context.t1);\n\n            case 8:\n              eth = self._getEth(); // not found\n\n              if (!(typeof eth === \"undefined\")) {\n                _context.next = 12;\n                break;\n              }\n\n              self.isInstalled = false;\n              return _context.abrupt(\"return\");\n\n            case 12:\n              self.isInstalled = true;\n              self.setEth(eth);\n              _context.next = 16;\n              return eth.accounts();\n\n            case 16:\n              _context.t2 = _context.sent;\n\n              if (_context.t2) {\n                _context.next = 19;\n                break;\n              }\n\n              _context.t2 = [];\n\n            case 19:\n              accounts = _context.t2;\n              self.account = accounts[0] || null;\n              networkId = Number(eth.currentProvider.networkVersion);\n              self.networkId = networkId;\n\n            case 23:\n            case \"end\":\n              return _context.stop();\n          }\n        }\n      }, _callee);\n    })),\n    getContract: function getContract(name) {\n      var eth = self.getEth();\n      return _getContract(eth, name);\n    }\n  };\n});\nexport default Model;","map":{"version":3,"sources":["/home/devlabs-php/Desktop/projects/ambire/bs/solidity-dkim/src/models/Eth/index.ts"],"names":["types","flow","getEth","getContract","isSSR","Model","model","isInstalled","maybeNull","account","string","networkId","number","views","self","isLoggedIn","network","actions","eth","_getEth","Error","setEth","_eth","sync","accounts","Number","currentProvider","networkVersion","name"],"mappings":"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","sourcesContent":["import { types, flow } from \"mobx-state-tree\";\nimport getEth from \"./getEth\";\nimport { getContract } from \"./getContract\";\nimport { isSSR } from \"../../utils\";\n\nconst Model = types\n  .model(\"Eth\", {\n    isInstalled: types.maybeNull(types.boolean),\n    account: types.maybeNull(types.string),\n    networkId: types.maybeNull(types.number)\n  })\n  .views(self => ({\n    get isLoggedIn() {\n      return self.account !== null;\n    },\n    get network() {\n      if (self.networkId === 1) {\n        return \"mainnet\";\n      } else if (self.networkId === 2) {\n        return \"morden\";\n      } else if (self.networkId === 11155111) {\n        return \"sepolia\";\n      }\n      \n      return \"unknown network\";\n    }\n  }))\n  .actions(self => {\n    let eth: any | undefined;\n\n    return {\n      _getEth() {\n        return eth;\n      },\n      getEth() {\n        if (!eth) {\n          throw Error(\"eth not initialized\");\n        }\n\n        return eth;\n      },\n      setEth(_eth: any) {\n        eth = _eth;\n      }\n    };\n  })\n  .actions(self => ({\n    sync: flow(function*() {\n      if (isSSR) {\n        return;\n      }\n\n      // not found, check window\n      if (!self._getEth()) {\n        self.setEth(yield getEth());\n      }\n\n      const eth = self._getEth();\n\n      // not found\n      if (typeof eth === \"undefined\") {\n        self.isInstalled = false;\n        return;\n      }\n\n      self.isInstalled = true;\n      self.setEth(eth);\n\n      const accounts = (yield eth.accounts()) || [];\n      self.account = accounts[0] || null;\n\n      const networkId = Number(eth.currentProvider.networkVersion);\n      self.networkId = networkId;\n    }),\n\n    getContract(name: Parameters<typeof getContract>[\"1\"]) {\n      const eth = self.getEth();\n\n      return getContract(eth, name);\n    }\n  }));\n\nexport default Model;\n"]},"metadata":{},"sourceType":"module"}