{"ast":null,"code":"var _Object$defineProperty = require(\"@babel/runtime-corejs2/core-js/object/define-property\");\n\nvar _Object$defineProperties = require(\"@babel/runtime-corejs2/core-js/object/define-properties\");\n\nvar _Object$getOwnPropertyDescriptors = require(\"@babel/runtime-corejs2/core-js/object/get-own-property-descriptors\");\n\nvar _Object$getOwnPropertyDescriptor = require(\"@babel/runtime-corejs2/core-js/object/get-own-property-descriptor\");\n\nvar _Object$getOwnPropertySymbols = require(\"@babel/runtime-corejs2/core-js/object/get-own-property-symbols\");\n\nvar _Object$keys = require(\"@babel/runtime-corejs2/core-js/object/keys\");\n\nvar _regeneratorRuntime = require(\"@babel/runtime-corejs2/regenerator\");\n\nvar _JSON$stringify = require(\"@babel/runtime-corejs2/core-js/json/stringify\");\n\nvar _defineProperty = require(\"@babel/runtime-corejs2/helpers/defineProperty\");\n\nvar _asyncToGenerator = require(\"@babel/runtime-corejs2/helpers/asyncToGenerator\");\n\nvar _Promise = require(\"@babel/runtime-corejs2/core-js/promise\");\n\nfunction ownKeys(object, enumerableOnly) { var keys = _Object$keys(object); if (_Object$getOwnPropertySymbols) { var symbols = _Object$getOwnPropertySymbols(object); if (enumerableOnly) symbols = symbols.filter(function (sym) { return _Object$getOwnPropertyDescriptor(object, sym).enumerable; }); keys.push.apply(keys, symbols); } return keys; }\n\nfunction _objectSpread(target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i] != null ? arguments[i] : {}; if (i % 2) { ownKeys(source, true).forEach(function (key) { _defineProperty(target, key, source[key]); }); } else if (_Object$getOwnPropertyDescriptors) { _Object$defineProperties(target, _Object$getOwnPropertyDescriptors(source)); } else { ownKeys(source).forEach(function (key) { _Object$defineProperty(target, key, _Object$getOwnPropertyDescriptor(source, key)); }); } } return target; }\n\n/*\n  parse and return email data\n  (browser)\n*/\nvar Hashes = require(\"jshashes\");\n\nvar parse = require(\"./parse\");\n\nvar toSolidity = require(\"./utils/toSolidity\");\n\nvar publicKeyToComponents = require(\"./utils/publicKeyToComponents\");\n\nvar main = function main(email) {\n  return new _Promise(\n  /*#__PURE__*/\n  function () {\n    var _ref = _asyncToGenerator(\n    /*#__PURE__*/\n    _regeneratorRuntime.mark(function _callee(resolve, reject) {\n      var dkims, publicKeys;\n      return _regeneratorRuntime.wrap(function _callee$(_context) {\n        while (1) {\n          switch (_context.prev = _context.next) {\n            case 0:\n              // get dkims\n              dkims = parse(email).dkims.map(function (dkim) {\n                var algorithm = dkim.algorithm.split(\"-\").pop().toUpperCase();\n                var bodyHashMatched = new Hashes[algorithm]().hex(dkim.processedBody) === dkim.signature.hash.toString(\"hex\");\n\n                if (!bodyHashMatched) {\n                  return reject(\"body hash did not verify\");\n                }\n\n                var hash = new Hashes[algorithm]().hex(dkim.processedHeader);\n                return _objectSpread({}, dkim, {\n                  hash: hash\n                });\n              }); // get dns records\n\n              _context.next = 3;\n              return fetch(\"/api/getPublicKeys\", {\n                method: \"POST\",\n                mode: \"same-origin\",\n                cache: \"no-cache\",\n                headers: {\n                  \"Content-Type\": \"application/json\"\n                },\n                referrer: \"no-referrer\",\n                body: _JSON$stringify(dkims.map(function (dkim) {\n                  return {\n                    domain: dkim.signature.domain,\n                    selector: dkim.signature.selector\n                  };\n                }))\n              }).then(function (res) {\n                return res.json();\n              }).then(function (entries) {\n                return entries.map(function (entry) {\n                  var publicKey = entry.publicKey;\n\n                  var _publicKeyToComponent = publicKeyToComponents(publicKey),\n                      exponent = _publicKeyToComponent.exponent,\n                      modulus = _publicKeyToComponent.modulus;\n\n                  return _objectSpread({}, entry, {\n                    exponent: exponent,\n                    modulus: modulus\n                  });\n                });\n              })[\"catch\"](reject);\n\n            case 3:\n              publicKeys = _context.sent;\n              return _context.abrupt(\"return\", resolve(dkims.map(function (dkim, i) {\n                var solidity = toSolidity({\n                  algorithm: dkim.algorithm,\n                  hash: dkim.hash,\n                  signature: dkim.signature.signature,\n                  exponent: publicKeys[i].exponent,\n                  modulus: publicKeys[i].modulus\n                });\n                return _objectSpread({}, dkim, {}, publicKeys[i], {\n                  solidity: solidity\n                });\n              })));\n\n            case 5:\n            case \"end\":\n              return _context.stop();\n          }\n        }\n      }, _callee);\n    }));\n\n    return function (_x, _x2) {\n      return _ref.apply(this, arguments);\n    };\n  }());\n};\n\nmodule.exports = main;","map":{"version":3,"sources":["/home/devlabs-php/Desktop/projects/ambire/bs/solidity-dkim/parse-email/browser.js"],"names":["Hashes","require","parse","toSolidity","publicKeyToComponents","main","email","resolve","reject","dkims","map","dkim","algorithm","split","pop","toUpperCase","bodyHashMatched","hex","processedBody","signature","hash","toString","processedHeader","fetch","method","mode","cache","headers","referrer","body","domain","selector","then","res","json","entries","entry","publicKey","exponent","modulus","publicKeys","i","solidity","module","exports"],"mappings":"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","sourcesContent":["/*\n  parse and return email data\n  (browser)\n*/\nconst Hashes = require(\"jshashes\");\nconst parse = require(\"./parse\");\nconst toSolidity = require(\"./utils/toSolidity\");\nconst publicKeyToComponents = require(\"./utils/publicKeyToComponents\");\n\nconst main = email => {\n  return new Promise(async (resolve, reject) => {\n    // get dkims\n    const dkims = parse(email).dkims.map(dkim => {\n      const algorithm = dkim.algorithm\n        .split(\"-\")\n        .pop()\n        .toUpperCase();\n\n      const bodyHashMatched =\n        new Hashes[algorithm]().hex(dkim.processedBody) ===\n        dkim.signature.hash.toString(\"hex\");\n\n      if (!bodyHashMatched) {\n        return reject(\"body hash did not verify\");\n      }\n\n      const hash = new Hashes[algorithm]().hex(dkim.processedHeader);\n\n      return {\n        ...dkim,\n        hash\n      };\n    });\n\n    // get dns records\n    const publicKeys = await fetch(\"/api/getPublicKeys\", {\n      method: \"POST\",\n      mode: \"same-origin\",\n      cache: \"no-cache\",\n      headers: {\n        \"Content-Type\": \"application/json\"\n      },\n      referrer: \"no-referrer\",\n      body: JSON.stringify(\n        dkims.map(dkim => ({\n          domain: dkim.signature.domain,\n          selector: dkim.signature.selector\n        }))\n      )\n    })\n      .then(res => res.json())\n      .then(entries => {\n        return entries.map(entry => {\n          const { publicKey } = entry;\n          const { exponent, modulus } = publicKeyToComponents(publicKey);\n\n          return {\n            ...entry,\n            exponent,\n            modulus\n          };\n        });\n      })\n      .catch(reject);\n\n    return resolve(\n      dkims.map((dkim, i) => {\n        const solidity = toSolidity({\n          algorithm: dkim.algorithm,\n          hash: dkim.hash,\n          signature: dkim.signature.signature,\n          exponent: publicKeys[i].exponent,\n          modulus: publicKeys[i].modulus\n        });\n\n        return {\n          ...dkim,\n          ...publicKeys[i],\n          solidity\n        };\n      })\n    );\n  });\n};\n\nmodule.exports = main;\n"]},"metadata":{},"sourceType":"script"}