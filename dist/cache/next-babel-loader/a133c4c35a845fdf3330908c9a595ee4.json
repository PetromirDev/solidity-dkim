{"ast":null,"code":"var _Object$defineProperty = require(\"@babel/runtime-corejs2/core-js/object/define-property\");\n\nvar _Object$defineProperties = require(\"@babel/runtime-corejs2/core-js/object/define-properties\");\n\nvar _Object$getOwnPropertyDescriptors = require(\"@babel/runtime-corejs2/core-js/object/get-own-property-descriptors\");\n\nvar _Object$getOwnPropertyDescriptor = require(\"@babel/runtime-corejs2/core-js/object/get-own-property-descriptor\");\n\nvar _Object$getOwnPropertySymbols = require(\"@babel/runtime-corejs2/core-js/object/get-own-property-symbols\");\n\nvar _Object$keys = require(\"@babel/runtime-corejs2/core-js/object/keys\");\n\nvar _defineProperty = require(\"@babel/runtime-corejs2/helpers/defineProperty\");\n\nfunction ownKeys(object, enumerableOnly) { var keys = _Object$keys(object); if (_Object$getOwnPropertySymbols) { var symbols = _Object$getOwnPropertySymbols(object); if (enumerableOnly) symbols = symbols.filter(function (sym) { return _Object$getOwnPropertyDescriptor(object, sym).enumerable; }); keys.push.apply(keys, symbols); } return keys; }\n\nfunction _objectSpread(target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i] != null ? arguments[i] : {}; if (i % 2) { ownKeys(source, true).forEach(function (key) { _defineProperty(target, key, source[key]); }); } else if (_Object$getOwnPropertyDescriptors) { _Object$defineProperties(target, _Object$getOwnPropertyDescriptors(source)); } else { ownKeys(source).forEach(function (key) { _Object$defineProperty(target, key, _Object$getOwnPropertyDescriptor(source, key)); }); } } return target; }\n\n/*\n  parse email\n  (cross-platform)\n*/\nconst Signature = require(\"dkim-signature\");\n\nconst processHeader = require(\"dkim/lib/process-header\");\n\nconst processBody = require(\"dkim/lib/process-body\");\n\nconst isDKIM = require(\"./utils/isDKIM\");\n\nconst emailToHeaderAndBody = email => {\n  const boundary = email.indexOf(\"\\r\\n\\r\\n\");\n\n  if (boundary === -1) {\n    throw Error(\"no header boundary found\");\n  }\n\n  const header = email.slice(0, boundary);\n  const body = email.slice(boundary + 4);\n  return {\n    boundary,\n    header,\n    body\n  };\n};\n\nconst getDkimEntry = dkim => {\n  const [name, ...rest] = dkim.split(\":\");\n  return {\n    name,\n    value: rest.join(\":\").slice(1)\n  };\n};\n\nconst getDkims = header => {\n  return header.split(/\\r\\n(?=[^\\x20\\x09]|$)/g).map((h, i, allHeaders) => {\n    if (isDKIM(h)) {\n      // remove DKIM headers\n      const headers = allHeaders.filter(v => !isDKIM(v)); // add one DKIM header\n\n      headers.unshift(h);\n      return {\n        entry: getDkimEntry(h),\n        headers\n      };\n    }\n\n    return undefined;\n  }).filter(v => !!v);\n};\n\nconst parse = email => {\n  const {\n    header,\n    body\n  } = emailToHeaderAndBody(email);\n  const dkims = getDkims(header).map(dkim => {\n    const signature = Signature.parse(dkim.entry.value);\n    const sigBody = signature.length != null ? body.slice(0, signature.length) : body;\n    const processedBody = processBody(sigBody, signature.canonical.split(\"/\").pop());\n    const processedHeader = processHeader(dkim.headers, signature.headers, signature.canonical.split(\"/\").shift());\n    const algorithm = signature.algorithm.toUpperCase();\n    return _objectSpread({}, dkim, {\n      signature,\n      processedBody,\n      processedHeader,\n      algorithm\n    });\n  });\n  return {\n    header,\n    body,\n    dkims\n  };\n};\n\nmodule.exports = parse;","map":{"version":3,"sources":["/home/devlabs-php/Desktop/projects/ambire/bs/solidity-dkim/parse-email/parse.js"],"names":["Signature","require","processHeader","processBody","isDKIM","emailToHeaderAndBody","email","boundary","indexOf","Error","header","slice","body","getDkimEntry","dkim","name","rest","split","value","join","getDkims","map","h","i","allHeaders","headers","filter","v","unshift","entry","undefined","parse","dkims","signature","sigBody","length","processedBody","canonical","pop","processedHeader","shift","algorithm","toUpperCase","module","exports"],"mappings":"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","sourcesContent":["/*\n  parse email\n  (cross-platform)\n*/\nconst Signature = require(\"dkim-signature\");\nconst processHeader = require(\"dkim/lib/process-header\");\nconst processBody = require(\"dkim/lib/process-body\");\nconst isDKIM = require(\"./utils/isDKIM\");\n\nconst emailToHeaderAndBody = email => {\n  const boundary = email.indexOf(\"\\r\\n\\r\\n\");\n  if (boundary === -1) {\n    throw Error(\"no header boundary found\");\n  }\n\n  const header = email.slice(0, boundary);\n  const body = email.slice(boundary + 4);\n\n  return {\n    boundary,\n    header,\n    body\n  };\n};\n\nconst getDkimEntry = dkim => {\n  const [name, ...rest] = dkim.split(\":\");\n\n  return {\n    name,\n    value: rest.join(\":\").slice(1)\n  };\n};\n\nconst getDkims = header => {\n  return header\n    .split(/\\r\\n(?=[^\\x20\\x09]|$)/g)\n    .map((h, i, allHeaders) => {\n      if (isDKIM(h)) {\n        // remove DKIM headers\n        const headers = allHeaders.filter(v => !isDKIM(v));\n        // add one DKIM header\n        headers.unshift(h);\n\n        return {\n          entry: getDkimEntry(h),\n          headers\n        };\n      }\n\n      return undefined;\n    })\n    .filter(v => !!v);\n};\n\nconst parse = email => {\n  const { header, body } = emailToHeaderAndBody(email);\n\n  const dkims = getDkims(header).map(dkim => {\n    const signature = Signature.parse(dkim.entry.value);\n\n    const sigBody =\n      signature.length != null ? body.slice(0, signature.length) : body;\n\n    const processedBody = processBody(\n      sigBody,\n      signature.canonical.split(\"/\").pop()\n    );\n\n    const processedHeader = processHeader(\n      dkim.headers,\n      signature.headers,\n      signature.canonical.split(\"/\").shift()\n    );\n\n    const algorithm = signature.algorithm.toUpperCase();\n\n    return {\n      ...dkim,\n      signature,\n      processedBody,\n      processedHeader,\n      algorithm\n    };\n  });\n\n  return {\n    header,\n    body,\n    dkims\n  };\n};\n\nmodule.exports = parse;\n"]},"metadata":{},"sourceType":"script"}