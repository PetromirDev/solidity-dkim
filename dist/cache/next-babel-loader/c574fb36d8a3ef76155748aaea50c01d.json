{"ast":null,"code":"import _Promise from \"@babel/runtime-corejs2/core-js/promise\";\nimport Eth from \"ethjs\";\n\nvar check = function check() {\n  var _ref = window,\n      web3 = _ref.web3;\n  var foundInWindow = typeof web3 !== \"undefined\";\n\n  if (!foundInWindow) {\n    console.log(\"No web3 instance injected.\");\n    return undefined;\n  }\n\n  console.log(\"Injected web3 detected.\");\n  return new Eth(web3.currentProvider);\n};\n\nvar getEth = function getEth() {\n  return new _Promise(function (resolve) {\n    // If document has loaded already, try to get Web3 immediately.\n    if (document.readyState === \"complete\") {\n      return resolve(check());\n    } // Wait for loading completion to avoid race conditions with web3 injection timing.\n\n\n    window.addEventListener(\"load\", function () {\n      resolve(check());\n    });\n  });\n};\n\nexport default getEth;","map":{"version":3,"sources":["/home/devlabs-php/Desktop/projects/ambire/bs/solidity-dkim/src/models/Eth/getEth.ts"],"names":["Eth","check","window","web3","foundInWindow","console","log","undefined","currentProvider","getEth","resolve","document","readyState","addEventListener"],"mappings":";AAAA,OAAOA,GAAP,MAAgB,OAAhB;;AAEA,IAAMC,KAAK,GAAG,SAARA,KAAQ,GAAM;AAAA,aACDC,MADC;AAAA,MACVC,IADU,QACVA,IADU;AAGlB,MAAMC,aAAa,GAAG,OAAOD,IAAP,KAAgB,WAAtC;;AACA,MAAI,CAACC,aAAL,EAAoB;AAClBC,IAAAA,OAAO,CAACC,GAAR;AACA,WAAOC,SAAP;AACD;;AAEDF,EAAAA,OAAO,CAACC,GAAR;AACA,SAAO,IAAIN,GAAJ,CAAQG,IAAI,CAACK,eAAb,CAAP;AACD,CAXD;;AAaA,IAAMC,MAAM,GAAG,SAATA,MAAS,GAAM;AACnB,SAAO,aAA6B,UAAAC,OAAO,EAAI;AAC7C;AACA,QAAIC,QAAQ,CAACC,UAAT,KAAwB,UAA5B,EAAwC;AACtC,aAAOF,OAAO,CAACT,KAAK,EAAN,CAAd;AACD,KAJ4C,CAM7C;;;AACAC,IAAAA,MAAM,CAACW,gBAAP,SAAgC,YAAM;AACpCH,MAAAA,OAAO,CAACT,KAAK,EAAN,CAAP;AACD,KAFD;AAGD,GAVM,CAAP;AAWD,CAZD;;AAcA,eAAeQ,MAAf","sourcesContent":["import Eth from \"ethjs\";\r\n\r\nconst check = () => {\r\n  const { web3 } = window as typeof window & { web3: any };\r\n\r\n  const foundInWindow = typeof web3 !== \"undefined\";\r\n  if (!foundInWindow) {\r\n    console.log(`No web3 instance injected.`);\r\n    return undefined;\r\n  }\r\n\r\n  console.log(`Injected web3 detected.`);\r\n  return new Eth(web3.currentProvider);\r\n};\r\n\r\nconst getEth = () => {\r\n  return new Promise<any | undefined>(resolve => {\r\n    // If document has loaded already, try to get Web3 immediately.\r\n    if (document.readyState === \"complete\") {\r\n      return resolve(check());\r\n    }\r\n\r\n    // Wait for loading completion to avoid race conditions with web3 injection timing.\r\n    window.addEventListener(`load`, () => {\r\n      resolve(check());\r\n    });\r\n  });\r\n};\r\n\r\nexport default getEth;\r\n"]},"metadata":{},"sourceType":"module"}