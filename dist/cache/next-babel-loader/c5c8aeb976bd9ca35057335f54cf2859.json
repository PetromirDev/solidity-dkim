{"ast":null,"code":"import { types, flow } from \"mobx-state-tree\";\nimport getEth from \"./getEth\";\nimport { getContract } from \"./getContract\";\nimport { isSSR } from \"../../utils\";\nconst Model = types.model(\"Eth\", {\n  isInstalled: types.maybeNull(types.boolean),\n  account: types.maybeNull(types.string),\n  networkId: types.maybeNull(types.number)\n}).views(self => ({\n  get isLoggedIn() {\n    return self.account !== null;\n  },\n\n  get network() {\n    if (self.networkId === 1) {\n      return \"mainnet\";\n    } else if (self.networkId === 2) {\n      return \"morden\";\n    } else if (self.networkId === 11155111) {\n      return \"sepolia\";\n    }\n\n    return \"unknown network\";\n  }\n\n})).actions(self => {\n  let eth;\n  return {\n    _getEth() {\n      return eth;\n    },\n\n    getEth() {\n      if (!eth) {\n        throw Error(\"eth not initialized\");\n      }\n\n      return eth;\n    },\n\n    setEth(_eth) {\n      eth = _eth;\n    }\n\n  };\n}).actions(self => ({\n  sync: flow(function* () {\n    if (isSSR) {\n      return;\n    } // not found, check window\n\n\n    if (!self._getEth()) {\n      self.setEth((yield getEth()));\n    }\n\n    const eth = self._getEth(); // not found\n\n\n    if (typeof eth === \"undefined\") {\n      self.isInstalled = false;\n      return;\n    }\n\n    self.isInstalled = true;\n    self.setEth(eth);\n    const accounts = (yield eth.accounts()) || [];\n    self.account = accounts[0] || null;\n    const networkId = Number(eth.currentProvider.networkVersion);\n    self.networkId = networkId;\n  }),\n\n  getContract(name) {\n    const eth = self.getEth();\n    return getContract(eth, name);\n  }\n\n}));\nexport default Model;","map":{"version":3,"sources":["/home/devlabs-php/Desktop/projects/ambire/bs/solidity-dkim/src/models/Eth/index.ts"],"names":["types","flow","getEth","getContract","isSSR","Model","model","isInstalled","maybeNull","boolean","account","string","networkId","number","views","self","isLoggedIn","network","actions","eth","_getEth","Error","setEth","_eth","sync","accounts","Number","currentProvider","networkVersion","name"],"mappings":"AAAA,SAASA,KAAT,EAAgBC,IAAhB,QAA4B,iBAA5B;AACA,OAAOC,MAAP,MAAmB,UAAnB;AACA,SAASC,WAAT,QAA4B,eAA5B;AACA,SAASC,KAAT,QAAsB,aAAtB;AAEA,MAAMC,KAAK,GAAGL,KAAK,CAChBM,KADW,CACL,KADK,EACE;AACZC,EAAAA,WAAW,EAAEP,KAAK,CAACQ,SAAN,CAAgBR,KAAK,CAACS,OAAtB,CADD;AAEZC,EAAAA,OAAO,EAAEV,KAAK,CAACQ,SAAN,CAAgBR,KAAK,CAACW,MAAtB,CAFG;AAGZC,EAAAA,SAAS,EAAEZ,KAAK,CAACQ,SAAN,CAAgBR,KAAK,CAACa,MAAtB;AAHC,CADF,EAMXC,KANW,CAMLC,IAAI,KAAK;AACd,MAAIC,UAAJ,GAAiB;AACf,WAAOD,IAAI,CAACL,OAAL,KAAiB,IAAxB;AACD,GAHa;;AAId,MAAIO,OAAJ,GAAc;AACZ,QAAIF,IAAI,CAACH,SAAL,KAAmB,CAAvB,EAA0B;AACxB,aAAO,SAAP;AACD,KAFD,MAEO,IAAIG,IAAI,CAACH,SAAL,KAAmB,CAAvB,EAA0B;AAC/B,aAAO,QAAP;AACD,KAFM,MAEA,IAAIG,IAAI,CAACH,SAAL,KAAmB,QAAvB,EAAiC;AACtC,aAAO,SAAP;AACD;;AAED,WAAO,iBAAP;AACD;;AAda,CAAL,CANC,EAsBXM,OAtBW,CAsBHH,IAAI,IAAI;AACf,MAAII,GAAJ;AAEA,SAAO;AACLC,IAAAA,OAAO,GAAG;AACR,aAAOD,GAAP;AACD,KAHI;;AAILjB,IAAAA,MAAM,GAAG;AACP,UAAI,CAACiB,GAAL,EAAU;AACR,cAAME,KAAK,CAAC,qBAAD,CAAX;AACD;;AAED,aAAOF,GAAP;AACD,KAVI;;AAWLG,IAAAA,MAAM,CAACC,IAAD,EAAY;AAChBJ,MAAAA,GAAG,GAAGI,IAAN;AACD;;AAbI,GAAP;AAeD,CAxCW,EAyCXL,OAzCW,CAyCHH,IAAI,KAAK;AAChBS,EAAAA,IAAI,EAAEvB,IAAI,CAAC,aAAY;AACrB,QAAIG,KAAJ,EAAW;AACT;AACD,KAHoB,CAKrB;;;AACA,QAAI,CAACW,IAAI,CAACK,OAAL,EAAL,EAAqB;AACnBL,MAAAA,IAAI,CAACO,MAAL,EAAY,MAAMpB,MAAM,EAAxB;AACD;;AAED,UAAMiB,GAAG,GAAGJ,IAAI,CAACK,OAAL,EAAZ,CAVqB,CAYrB;;;AACA,QAAI,OAAOD,GAAP,KAAe,WAAnB,EAAgC;AAC9BJ,MAAAA,IAAI,CAACR,WAAL,GAAmB,KAAnB;AACA;AACD;;AAEDQ,IAAAA,IAAI,CAACR,WAAL,GAAmB,IAAnB;AACAQ,IAAAA,IAAI,CAACO,MAAL,CAAYH,GAAZ;AAEA,UAAMM,QAAQ,GAAG,CAAC,MAAMN,GAAG,CAACM,QAAJ,EAAP,KAA0B,EAA3C;AACAV,IAAAA,IAAI,CAACL,OAAL,GAAee,QAAQ,CAAC,CAAD,CAAR,IAAe,IAA9B;AAEA,UAAMb,SAAS,GAAGc,MAAM,CAACP,GAAG,CAACQ,eAAJ,CAAoBC,cAArB,CAAxB;AACAb,IAAAA,IAAI,CAACH,SAAL,GAAiBA,SAAjB;AACD,GA1BS,CADM;;AA6BhBT,EAAAA,WAAW,CAAC0B,IAAD,EAA4C;AACrD,UAAMV,GAAG,GAAGJ,IAAI,CAACb,MAAL,EAAZ;AAEA,WAAOC,WAAW,CAACgB,GAAD,EAAMU,IAAN,CAAlB;AACD;;AAjCe,CAAL,CAzCD,CAAd;AA6EA,eAAexB,KAAf","sourcesContent":["import { types, flow } from \"mobx-state-tree\";\nimport getEth from \"./getEth\";\nimport { getContract } from \"./getContract\";\nimport { isSSR } from \"../../utils\";\n\nconst Model = types\n  .model(\"Eth\", {\n    isInstalled: types.maybeNull(types.boolean),\n    account: types.maybeNull(types.string),\n    networkId: types.maybeNull(types.number)\n  })\n  .views(self => ({\n    get isLoggedIn() {\n      return self.account !== null;\n    },\n    get network() {\n      if (self.networkId === 1) {\n        return \"mainnet\";\n      } else if (self.networkId === 2) {\n        return \"morden\";\n      } else if (self.networkId === 11155111) {\n        return \"sepolia\";\n      }\n      \n      return \"unknown network\";\n    }\n  }))\n  .actions(self => {\n    let eth: any | undefined;\n\n    return {\n      _getEth() {\n        return eth;\n      },\n      getEth() {\n        if (!eth) {\n          throw Error(\"eth not initialized\");\n        }\n\n        return eth;\n      },\n      setEth(_eth: any) {\n        eth = _eth;\n      }\n    };\n  })\n  .actions(self => ({\n    sync: flow(function*() {\n      if (isSSR) {\n        return;\n      }\n\n      // not found, check window\n      if (!self._getEth()) {\n        self.setEth(yield getEth());\n      }\n\n      const eth = self._getEth();\n\n      // not found\n      if (typeof eth === \"undefined\") {\n        self.isInstalled = false;\n        return;\n      }\n\n      self.isInstalled = true;\n      self.setEth(eth);\n\n      const accounts = (yield eth.accounts()) || [];\n      self.account = accounts[0] || null;\n\n      const networkId = Number(eth.currentProvider.networkVersion);\n      self.networkId = networkId;\n    }),\n\n    getContract(name: Parameters<typeof getContract>[\"1\"]) {\n      const eth = self.getEth();\n\n      return getContract(eth, name);\n    }\n  }));\n\nexport default Model;\n"]},"metadata":{},"sourceType":"module"}